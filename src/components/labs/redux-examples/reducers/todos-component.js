/*
The Provider delivers the content of the store to all its child components.
This is done by invoking all the methods declared in useSelector in the components.
 */
import React, {useState} from "react"; // import useState to work with local state
import {useDispatch, useSelector} from "react-redux"; // import the hook, useSelector

const Todos = () => {
    /*
    The component uses useSelector to retrieve the todos generated by todos-reducer.js. The todos is
    retrieved from the reducer with useSelector returning the todos arrays returned by the reducer,
    e.g., the array of two todos objects in todos-reducer.js.
     */
    const todos // retrieve todos from reducer state and assign to local todos constant
        = useSelector(state => state.todos);

    /*
    Redux is great for working with application level state. Let's now consider component state.
    The React useState hook can be used to deal with local component state.
    This is especially useful to integrate React with forms. Let's practice working with forms by
    adding an input field users can use to create new todos. We'll keep track of the new todos' text
    in a local state variable called todos and mutate its value using a function called setTodo as
    shown in the code below.
     */
    // Let's practice changing something in a reducer. To do this, let's add a done flag we can change easily with a checkbox. Add a done property to the todo initialization as shown below
    const [todo, setTodo] = useState({do: '', done: false}); // create todos local state variable, add done property

    const todoChangeHandler = (event) => { // handle keystroke changes in input field
        const doValue = event.target.value; // get data from input field
        const newTodo = { // create new todos object instance
            do: doValue // setting the todo's do property
        };
        setTodo(newTodo); // change local state todo variable
    }

    /*
    Now that we have edited a todos object, we can send it to the reducer to store it in the global state.
    To do this we will use the dispatch hook as shown below.
     */
    const dispatch = useDispatch(); // create a dispatch handle create click event
    const createTodoClickHandler = () => { // create action object
        const action = {                   // required action type
            type: 'create-todo',
            todo                           // payload
        };
        dispatch(action);                  // send action to reducers
    }

    /*
    We can delete todos by filtering out the deleted todos from the current array of todos.
    */
    const deleteTodoClickHandler = (todo) => { // delete todo event handler accepts todo
        const action = {                       // create new action
            type: 'delete-todo',               // with type 'delete-todo'
            todo                               // include todo to remove
        };
        dispatch(action);                      // send action to all reducers
    }

    /*
    Let's practice changing something in a reducer
     */
    const updateTodoClickHandler = (todo) => { // handle checkbox click
        const action = {                       // create new action
            type: 'update-todo',               // with update-todo event
            todo                               // include todo object
        };
        dispatch(action);                      // send to all reducers
    }

    return(
        <>
            <h3>Todos</h3>
            <ul className="list-group">
                <li className="list-group-item">
                    <input
                        onChange={todoChangeHandler}
                        value={todo.do}
                        className="form-control"/>

                    <button onClick={createTodoClickHandler} // create button notifies event handler when clicked to create a new todo
                            className="btn btn-primary">
                        Create New Todo
                    </button>

                </li>
                {
                    todos.map(todo => // iterate over todos array and render a line item element for each todos object
                                      // display do property containing the todos text
                                  <li className="list-group-item">

                                      <input checked={todo.done}                                // create a checkbox, show checked if done=true
                                             onChange={(event) =>    // if checkbox changes, update done with
                                                 updateTodoClickHandler(                        // checkbox's value
                                                     {...todo,                             // copy old state
                                                         done: event.target.checked})}          // overwrite done with target.checked
                                             type="checkbox"/>

                                      {todo.do}

                                      <button onClick={() =>    // if user clicks on Delete button
                                          deleteTodoClickHandler(todo)} // call event handler passing todo instance
                                              className="btn btn-danger float-end">
                                          Delete
                                      </button>
                                  </li>
                    )
                }
            </ul>
        </>
    );
};
export default Todos;